// Mocks generated by Mockito 5.3.2 from annotations
// in who_writes/test/presentation/auth/login_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/rxdart.dart' as _i2;
import 'package:who_writes/presentation/auth/login/login_bloc.dart' as _i3;
import 'package:who_writes/presentation/auth/login/login_fail_state.dart'
    as _i5;
import 'package:who_writes/presentation/common/status/button_status.dart'
    as _i6;
import 'package:who_writes/presentation/common/status/input_status.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSink_0<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompositeSubscription_1 extends _i1.SmartFake
    implements _i2.CompositeSubscription {
  _FakeCompositeSubscription_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginBloc extends _i1.Mock implements _i3.LoginBloc {
  MockLoginBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.LoginFailState> get onLoginFailStream => (super.noSuchMethod(
        Invocation.getter(#onLoginFailStream),
        returnValue: _i4.Stream<_i5.LoginFailState>.empty(),
      ) as _i4.Stream<_i5.LoginFailState>);
  @override
  _i4.Stream<void> get onLoginSuccessStream => (super.noSuchMethod(
        Invocation.getter(#onLoginSuccessStream),
        returnValue: _i4.Stream<void>.empty(),
      ) as _i4.Stream<void>);
  @override
  Sink<void> get onLoginButtonPressedSink => (super.noSuchMethod(
        Invocation.getter(#onLoginButtonPressedSink),
        returnValue: _FakeSink_0<void>(
          this,
          Invocation.getter(#onLoginButtonPressedSink),
        ),
      ) as Sink<void>);
  @override
  _i4.Stream<_i6.ButtonStatus> get buttonStatusStream => (super.noSuchMethod(
        Invocation.getter(#buttonStatusStream),
        returnValue: _i4.Stream<_i6.ButtonStatus>.empty(),
      ) as _i4.Stream<_i6.ButtonStatus>);
  @override
  Sink<String> get onEmailChangeSink => (super.noSuchMethod(
        Invocation.getter(#onEmailChangeSink),
        returnValue: _FakeSink_0<String>(
          this,
          Invocation.getter(#onEmailChangeSink),
        ),
      ) as Sink<String>);
  @override
  Sink<String> get onPasswordChangeSink => (super.noSuchMethod(
        Invocation.getter(#onPasswordChangeSink),
        returnValue: _FakeSink_0<String>(
          this,
          Invocation.getter(#onPasswordChangeSink),
        ),
      ) as Sink<String>);
  @override
  _i4.Stream<_i7.InputStatus> get emailInputStatusStream => (super.noSuchMethod(
        Invocation.getter(#emailInputStatusStream),
        returnValue: _i4.Stream<_i7.InputStatus>.empty(),
      ) as _i4.Stream<_i7.InputStatus>);
  @override
  Sink<_i7.InputStatus> get emailInputStatusSink => (super.noSuchMethod(
        Invocation.getter(#emailInputStatusSink),
        returnValue: _FakeSink_0<_i7.InputStatus>(
          this,
          Invocation.getter(#emailInputStatusSink),
        ),
      ) as Sink<_i7.InputStatus>);
  @override
  _i4.Stream<_i7.InputStatus> get passwoarInputStatusStream =>
      (super.noSuchMethod(
        Invocation.getter(#passwoarInputStatusStream),
        returnValue: _i4.Stream<_i7.InputStatus>.empty(),
      ) as _i4.Stream<_i7.InputStatus>);
  @override
  Sink<_i7.InputStatus> get passwordInputStatusSink => (super.noSuchMethod(
        Invocation.getter(#passwordInputStatusSink),
        returnValue: _FakeSink_0<_i7.InputStatus>(
          this,
          Invocation.getter(#passwordInputStatusSink),
        ),
      ) as Sink<_i7.InputStatus>);
  @override
  _i2.CompositeSubscription get subscriptions => (super.noSuchMethod(
        Invocation.getter(#subscriptions),
        returnValue: _FakeCompositeSubscription_1(
          this,
          Invocation.getter(#subscriptions),
        ),
      ) as _i2.CompositeSubscription);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void disposeAll() => super.noSuchMethod(
        Invocation.method(
          #disposeAll,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
